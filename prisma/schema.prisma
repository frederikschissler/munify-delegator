datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator prismabox {
  provider                    = "prismabox"
  typeboxImportVariableName   = "t"
  typeboxImportDependencyName = "elysia"
  output                      = "./generated/schema"
  inputModel                  = true
  additionalFieldsPlain       = ["__typename: t.Optional(t.String())"]
  allowRecursion              = false
}

enum ConferenceStatus {
  PRE
  ACTIVE
  POST
}

model Conference {
  id                           String                        @id @default(nanoid())
  title                        String
  longTitle                    String?
  start                        DateTime?
  end                          DateTime?
  location                     String?
  language                     String?
  website                      String?
  image                        Bytes?
  status                       ConferenceStatus              @default(PRE)
  startRegistration            DateTime?
  endRegistration              DateTime?
  individualApplicationOptions CustomConferenceRole[]
  delegations                  Delegation[]
  nonStateActors               NonStateActor[]
  conferenceSupervisors        ConferenceSupervisor[]
  conferenceUserStatus         ConferenceParticipantStatus[]
  teamMembers                  TeamMember[]
  committees                   Committee[]
  singleParticipant            SingleParticipant[]
  DelegationMember             DelegationMember[]
}

model Committee {
  id                      String     @id @default(nanoid())
  name                    String
  abbreviation            String
  conference              Conference @relation(fields: [conferenceId], references: [id])
  conferenceId            String
  nations                 Nation[]
  numOfSeatsPerDelegation Int        @default(1)
}

enum FoodPreference {
  OMNIVORE
  VEGETARIAN
  VEGAN
}

model User {
  id String @id @default(nanoid())

  // these are OIDC fields and only will be updated by the issuer in the login flow
  /// @prismabox.input.hide
  email              String
  /// @prismabox.input.hide
  family_name        String
  /// @prismabox.input.hide
  given_name         String
  /// @prismabox.input.hide
  locale             String
  /// @prismabox.input.hide
  preferred_username String

  // custom data fields
  birthday       DateTime?
  phone          String?
  street         String?
  apartment      String?
  zip            String?
  city           String?
  country        String?
  gender         String?
  pronouns       String?
  foodPreference FoodPreference?

  delegationMemberships       DelegationMember[]
  conferenceSupervisor        ConferenceSupervisor[]
  conferenceParticipantStatus ConferenceParticipantStatus[]
  teamMember                  TeamMember[]
  singleParticipant           SingleParticipant[]

  wantsToReceiveGeneralInformation Boolean @default(false)
  wantsJoinTeamInformation         Boolean @default(false)
}

enum AdministrativeStatus {
  DONE
  PROBLEM
  PENDING
}

// administrative status of a user in a conference, used for storing e.g. payment status, postal application status, etc.
model ConferenceParticipantStatus {
  id                 String               @id @default(nanoid())
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  conference         Conference           @relation(fields: [conferenceId], references: [id])
  conferenceId       String
  postalRegistration AdministrativeStatus
  paymentStatus      AdministrativeStatus
  didAttend          Boolean
}

model Nation {
  alpha3Code       String            @id
  alpha2Code       String            @unique
  // other properties are fetched from nation databases/libraries which do not want to maintain on our own
  // e.g. localized names, flags, etc.
  roleApplications RoleApplication[]
  committees       Committee[]
}

model NonStateActor {
  id               String            @id @default(nanoid())
  conference       Conference        @relation(fields: [conferenceId], references: [id])
  conferenceId     String
  name             String            @unique
  description      String
  fontAwesomeIcon  String?
  abbreviation     String            @unique
  seatAmount       Int               @default(2)
  roleApplications RoleApplication[]
}

// these can be journalists, judges, etc.
model CustomConferenceRole {
  id                String              @id @default(nanoid())
  conference        Conference          @relation(fields: [conferenceId], references: [id])
  conferenceId      String
  name              String
  description       String
  fontAwesomeIcon   String?
  singleParticipant SingleParticipant[]

  @@unique([conferenceId, name])
}

model SingleParticipant {
  id           String     @id @default(nanoid())
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  applied    Boolean @default(false)
  school     String
  motivation String
  experience String

  appliedForRoles CustomConferenceRole[]

  @@unique([conferenceId, userId])
}

model Delegation {
  id           String             @id @default(nanoid())
  /// @prismabox.update.input.hide
  conference   Conference         @relation(fields: [conferenceId], references: [id])
  conferenceId String
  /// @prismabox.input.hide
  entryCode    String             @unique
  /// @prismabox.input.hide
  members      DelegationMember[]

  /// @prismabox.input.hide
  applied         Boolean           @default(false)
  appliedForRoles RoleApplication[]
  school          String
  motivation      String
  experience      String

  /// @prismabox.input.hide
  supervisors ConferenceSupervisor[]
}

model RoleApplication {
  id              String         @id @default(nanoid())
  nation          Nation?        @relation(fields: [nationId], references: [alpha3Code])
  nationId        String?
  nonStateActor   NonStateActor? @relation(fields: [nonStateActorId], references: [id])
  nonStateActorId String?
  rank            Int
  delegation      Delegation?    @relation(fields: [delegationId], references: [id])
  delegationId    String?

  @@unique([delegationId, nationId])
  @@unique([delegationId, nonStateActorId])
  @@unique([delegationId, rank])
}

model DelegationMember {
  id             String     @id @default(nanoid())
  conference     Conference @relation(fields: [conferenceId], references: [id])
  conferenceId   String
  delegation     Delegation @relation(fields: [delegationId], references: [id], onDelete: Cascade)
  delegationId   String
  user           User       @relation(fields: [userId], references: [id])
  userId         String
  isHeadDelegate Boolean

  // users can only be once in this delegation
  @@unique([delegationId, userId])
  // users can only be in one delegation per conference
  @@unique([conferenceId, userId])
}

model ConferenceSupervisor {
  id                             String       @id @default(nanoid())
  conference                     Conference   @relation(fields: [conferenceId], references: [id])
  conferenceId                   String
  delegations                    Delegation[]
  user                           User         @relation(fields: [userId], references: [id])
  userId                         String
  plansOwnAttendenceAtConference Boolean

  @@unique([conferenceId, userId])
}

enum TeamRole {
  ADMIN
  PROJECT_MANAGEMENT
  PARTICIPANT_CARE
  MEMBER
}

model TeamMember {
  id           String     @id @default(nanoid())
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  role         TeamRole   @default(MEMBER)
}
